/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

// Token : 代表 1 个 redis 对象
type Token struct {
	Key       string
	accountID uint64
	token     string

	dirtyDataInToken               map[string]interface{}
	dirtyDataForStructFiledInToken map[string]interface{}
	isLoadInToken                  bool
	dbKeyInToken                   string
	ddbNameInToken                 string
	expireInToken                  uint
}

// NewToken : NewToken 的构造函数
func NewToken(dbName string, key string) *Token {
	return &Token{
		Key:                            key,
		ddbNameInToken:                 dbName,
		dbKeyInToken:                   "Token:" + key,
		dirtyDataInToken:               make(map[string]interface{}),
		dirtyDataForStructFiledInToken: make(map[string]interface{}),
	}
}

// HasKey : 是否存在 KEY
//          返回值，若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (objToken *Token) HasKey() (int, error) {
	db := go_redis_orm.GetDB(objToken.ddbNameInToken)
	val, err := redis.Int(db.Do("EXISTS", objToken.dbKeyInToken))
	if err != nil {
		return -1, err
	}
	return val, nil
}

// Load : 从 redis 加载数据
func (objToken *Token) Load() error {
	if objToken.isLoadInToken == true {
		return errors.New("alreay load")
	}
	db := go_redis_orm.GetDB(objToken.ddbNameInToken)
	val, err := redis.Values(db.Do("HGETALL", objToken.dbKeyInToken))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		AccountID uint64 `redis:"accountid"`
		Token     string `redis:"token"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	objToken.accountID = data.AccountID
	objToken.token = data.Token
	objToken.isLoadInToken = true
	return nil
}

// Save : 保存数据到 redis
func (objToken *Token) Save() error {
	if len(objToken.dirtyDataInToken) == 0 && len(objToken.dirtyDataForStructFiledInToken) == 0 {
		return nil
	}
	for k := range objToken.dirtyDataForStructFiledInToken {
		_ = k

	}
	db := go_redis_orm.GetDB(objToken.ddbNameInToken)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objToken.dbKeyInToken).AddFlat(objToken.dirtyDataInToken)...); err != nil {
		return err
	}
	if objToken.expireInToken != 0 {
		if _, err := db.Do("EXPIRE", objToken.dbKeyInToken, objToken.expireInToken); err != nil {
			return err
		}
	}
	objToken.dirtyDataInToken = make(map[string]interface{})
	objToken.dirtyDataForStructFiledInToken = make(map[string]interface{})
	return nil
}

// Delete : 从 redis 删除数据
func (objToken *Token) Delete() error {
	db := go_redis_orm.GetDB(objToken.ddbNameInToken)
	_, err := db.Do("DEL", objToken.dbKeyInToken)
	if err == nil {
		objToken.isLoadInToken = false
		objToken.dirtyDataInToken = make(map[string]interface{})
		objToken.dirtyDataForStructFiledInToken = make(map[string]interface{})
	}
	return err
}

// IsLoad : 是否已经从 redis 导入数据
func (objToken *Token) IsLoad() bool {
	return objToken.isLoadInToken
}

// Expire : 向 redis 设置该对象过期时间
func (objToken *Token) Expire(v uint) {
	objToken.expireInToken = v
}

// DirtyData : 获取该对象目前已脏的数据
func (objToken *Token) DirtyData() (map[string]interface{}, error) {
	for k := range objToken.dirtyDataForStructFiledInToken {
		_ = k

	}
	data := make(map[string]interface{})
	for k, v := range objToken.dirtyDataInToken {
		data[k] = v
	}
	objToken.dirtyDataInToken = make(map[string]interface{})
	objToken.dirtyDataForStructFiledInToken = make(map[string]interface{})
	return data, nil
}

// Save2 : 保存数据到 redis 的第 2 种方法
func (objToken *Token) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(objToken.ddbNameInToken)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objToken.dbKeyInToken).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if objToken.expireInToken != 0 {
		if _, err := db.Do("EXPIRE", objToken.dbKeyInToken, objToken.expireInToken); err != nil {
			return err
		}
	}
	return nil
}

// GetAccountID : 获取字段值
func (objToken *Token) GetAccountID() uint64 {
	return objToken.accountID
}

// GetToken : 获取字段值
func (objToken *Token) GetToken() string {
	return objToken.token
}

// SetAccountID : 设置字段值
func (objToken *Token) SetAccountID(value uint64) {
	objToken.accountID = value
	objToken.dirtyDataInToken["accountid"] = value
}

// SetToken : 设置字段值
func (objToken *Token) SetToken(value string) {
	objToken.token = value
	objToken.dirtyDataInToken["token"] = string([]byte(value))
}
