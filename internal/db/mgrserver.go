/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"
	"fmt"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

// MgrServer : 代表 1 个 redis 对象
type MgrServer struct {
	Key  uint32
	addr string
	port int32

	dirtyDataInMgrServer               map[string]interface{}
	dirtyDataForStructFiledInMgrServer map[string]interface{}
	isLoadInMgrServer                  bool
	dbKeyInMgrServer                   string
	ddbNameInMgrServer                 string
	expireInMgrServer                  uint
}

// NewMgrServer : NewMgrServer 的构造函数
func NewMgrServer(dbName string, key uint32) *MgrServer {
	return &MgrServer{
		Key:                                key,
		ddbNameInMgrServer:                 dbName,
		dbKeyInMgrServer:                   "MgrServer:" + fmt.Sprintf("%d", key),
		dirtyDataInMgrServer:               make(map[string]interface{}),
		dirtyDataForStructFiledInMgrServer: make(map[string]interface{}),
	}
}

// HasKey : 是否存在 KEY
//          返回值，若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (objMgrServer *MgrServer) HasKey() (int, error) {
	db := go_redis_orm.GetDB(objMgrServer.ddbNameInMgrServer)
	val, err := redis.Int(db.Do("EXISTS", objMgrServer.dbKeyInMgrServer))
	if err != nil {
		return -1, err
	}
	return val, nil
}

// Load : 从 redis 加载数据
func (objMgrServer *MgrServer) Load() error {
	if objMgrServer.isLoadInMgrServer == true {
		return errors.New("alreay load")
	}
	db := go_redis_orm.GetDB(objMgrServer.ddbNameInMgrServer)
	val, err := redis.Values(db.Do("HGETALL", objMgrServer.dbKeyInMgrServer))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Addr string `redis:"addr"`
		Port int32  `redis:"port"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	objMgrServer.addr = data.Addr
	objMgrServer.port = data.Port
	objMgrServer.isLoadInMgrServer = true
	return nil
}

// Save : 保存数据到 redis
func (objMgrServer *MgrServer) Save() error {
	if len(objMgrServer.dirtyDataInMgrServer) == 0 && len(objMgrServer.dirtyDataForStructFiledInMgrServer) == 0 {
		return nil
	}
	for k := range objMgrServer.dirtyDataForStructFiledInMgrServer {
		_ = k

	}
	db := go_redis_orm.GetDB(objMgrServer.ddbNameInMgrServer)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objMgrServer.dbKeyInMgrServer).AddFlat(objMgrServer.dirtyDataInMgrServer)...); err != nil {
		return err
	}
	if objMgrServer.expireInMgrServer != 0 {
		if _, err := db.Do("EXPIRE", objMgrServer.dbKeyInMgrServer, objMgrServer.expireInMgrServer); err != nil {
			return err
		}
	}
	objMgrServer.dirtyDataInMgrServer = make(map[string]interface{})
	objMgrServer.dirtyDataForStructFiledInMgrServer = make(map[string]interface{})
	return nil
}

// Delete : 从 redis 删除数据
func (objMgrServer *MgrServer) Delete() error {
	db := go_redis_orm.GetDB(objMgrServer.ddbNameInMgrServer)
	_, err := db.Do("DEL", objMgrServer.dbKeyInMgrServer)
	if err == nil {
		objMgrServer.isLoadInMgrServer = false
		objMgrServer.dirtyDataInMgrServer = make(map[string]interface{})
		objMgrServer.dirtyDataForStructFiledInMgrServer = make(map[string]interface{})
	}
	return err
}

// IsLoad : 是否已经从 redis 导入数据
func (objMgrServer *MgrServer) IsLoad() bool {
	return objMgrServer.isLoadInMgrServer
}

// Expire : 向 redis 设置该对象过期时间
func (objMgrServer *MgrServer) Expire(v uint) {
	objMgrServer.expireInMgrServer = v
}

// DirtyData : 获取该对象目前已脏的数据
func (objMgrServer *MgrServer) DirtyData() (map[string]interface{}, error) {
	for k := range objMgrServer.dirtyDataForStructFiledInMgrServer {
		_ = k

	}
	data := make(map[string]interface{})
	for k, v := range objMgrServer.dirtyDataInMgrServer {
		data[k] = v
	}
	objMgrServer.dirtyDataInMgrServer = make(map[string]interface{})
	objMgrServer.dirtyDataForStructFiledInMgrServer = make(map[string]interface{})
	return data, nil
}

// Save2 : 保存数据到 redis 的第 2 种方法
func (objMgrServer *MgrServer) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(objMgrServer.ddbNameInMgrServer)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objMgrServer.dbKeyInMgrServer).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if objMgrServer.expireInMgrServer != 0 {
		if _, err := db.Do("EXPIRE", objMgrServer.dbKeyInMgrServer, objMgrServer.expireInMgrServer); err != nil {
			return err
		}
	}
	return nil
}

// GetAddr : 获取字段值
func (objMgrServer *MgrServer) GetAddr() string {
	return objMgrServer.addr
}

// GetPort : 获取字段值
func (objMgrServer *MgrServer) GetPort() int32 {
	return objMgrServer.port
}

// SetAddr : 设置字段值
func (objMgrServer *MgrServer) SetAddr(value string) {
	objMgrServer.addr = value
	objMgrServer.dirtyDataInMgrServer["addr"] = string([]byte(value))
}

// SetPort : 设置字段值
func (objMgrServer *MgrServer) SetPort(value int32) {
	objMgrServer.port = value
	objMgrServer.dirtyDataInMgrServer["port"] = value
}
