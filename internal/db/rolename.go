/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

// RoleName : 代表 1 个 redis 对象
type RoleName struct {
	Key     string
	account string

	dirtyDataInRoleName               map[string]interface{}
	dirtyDataForStructFiledInRoleName map[string]interface{}
	isLoadInRoleName                  bool
	dbKeyInRoleName                   string
	ddbNameInRoleName                 string
	expireInRoleName                  uint
}

// NewRoleName : NewRoleName 的构造函数
func NewRoleName(dbName string, key string) *RoleName {
	return &RoleName{
		Key:                               key,
		ddbNameInRoleName:                 dbName,
		dbKeyInRoleName:                   "RoleName:" + key,
		dirtyDataInRoleName:               make(map[string]interface{}),
		dirtyDataForStructFiledInRoleName: make(map[string]interface{}),
	}
}

// HasKey : 是否存在 KEY
//          返回值，若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (objRoleName *RoleName) HasKey() (int, error) {
	db := go_redis_orm.GetDB(objRoleName.ddbNameInRoleName)
	val, err := redis.Int(db.Do("EXISTS", objRoleName.dbKeyInRoleName))
	if err != nil {
		return -1, err
	}
	return val, nil
}

// Load : 从 redis 加载数据
func (objRoleName *RoleName) Load() error {
	if objRoleName.isLoadInRoleName == true {
		return errors.New("alreay load")
	}
	db := go_redis_orm.GetDB(objRoleName.ddbNameInRoleName)
	val, err := redis.Values(db.Do("HGETALL", objRoleName.dbKeyInRoleName))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Account string `redis:"account"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	objRoleName.account = data.Account
	objRoleName.isLoadInRoleName = true
	return nil
}

// Save : 保存数据到 redis
func (objRoleName *RoleName) Save() error {
	if len(objRoleName.dirtyDataInRoleName) == 0 && len(objRoleName.dirtyDataForStructFiledInRoleName) == 0 {
		return nil
	}
	for k := range objRoleName.dirtyDataForStructFiledInRoleName {
		_ = k

	}
	db := go_redis_orm.GetDB(objRoleName.ddbNameInRoleName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRoleName.dbKeyInRoleName).AddFlat(objRoleName.dirtyDataInRoleName)...); err != nil {
		return err
	}
	if objRoleName.expireInRoleName != 0 {
		if _, err := db.Do("EXPIRE", objRoleName.dbKeyInRoleName, objRoleName.expireInRoleName); err != nil {
			return err
		}
	}
	objRoleName.dirtyDataInRoleName = make(map[string]interface{})
	objRoleName.dirtyDataForStructFiledInRoleName = make(map[string]interface{})
	return nil
}

// Delete : 从 redis 删除数据
func (objRoleName *RoleName) Delete() error {
	db := go_redis_orm.GetDB(objRoleName.ddbNameInRoleName)
	_, err := db.Do("DEL", objRoleName.dbKeyInRoleName)
	if err == nil {
		objRoleName.isLoadInRoleName = false
		objRoleName.dirtyDataInRoleName = make(map[string]interface{})
		objRoleName.dirtyDataForStructFiledInRoleName = make(map[string]interface{})
	}
	return err
}

// IsLoad : 是否已经从 redis 导入数据
func (objRoleName *RoleName) IsLoad() bool {
	return objRoleName.isLoadInRoleName
}

// Expire : 向 redis 设置该对象过期时间
func (objRoleName *RoleName) Expire(v uint) {
	objRoleName.expireInRoleName = v
}

// DirtyData : 获取该对象目前已脏的数据
func (objRoleName *RoleName) DirtyData() (map[string]interface{}, error) {
	for k := range objRoleName.dirtyDataForStructFiledInRoleName {
		_ = k

	}
	data := make(map[string]interface{})
	for k, v := range objRoleName.dirtyDataInRoleName {
		data[k] = v
	}
	objRoleName.dirtyDataInRoleName = make(map[string]interface{})
	objRoleName.dirtyDataForStructFiledInRoleName = make(map[string]interface{})
	return data, nil
}

// Save2 : 保存数据到 redis 的第 2 种方法
func (objRoleName *RoleName) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(objRoleName.ddbNameInRoleName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRoleName.dbKeyInRoleName).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if objRoleName.expireInRoleName != 0 {
		if _, err := db.Do("EXPIRE", objRoleName.dbKeyInRoleName, objRoleName.expireInRoleName); err != nil {
			return err
		}
	}
	return nil
}

// GetAccount : 获取字段值
func (objRoleName *RoleName) GetAccount() string {
	return objRoleName.account
}

// SetAccount : 设置字段值
func (objRoleName *RoleName) SetAccount(value string) {
	objRoleName.account = value
	objRoleName.dirtyDataInRoleName["account"] = string([]byte(value))
}
