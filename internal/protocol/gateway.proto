syntax = "proto3";

package protocol;
import "common.proto";

message CMD_GW {
    enum ENUM {
        INVALID = 0;                        // 未定义
        PING = 1;                           // PING ( GATEWAY -> S )。实际上用的是 mgr.proto 的协议。这里占位下，避免协议号重复
        REGISTER_SERVER = 2;                // 注册服务器信息 ( S -> GATEWAY -> S )。实际上用的是 mgr.proto 的协议。这里占位下，避免协议号重复
        LOSE_SERVER = 3;                    // 丢失服务器信息 ( GATEWAY -> S )。实际上用的是 mgr.proto 的协议。这里占位下，避免协议号重复
        REGISTER_ACCOUNT = 4;               // 注册账号 ( GATEWAY -> S )。只通知账号对应分配的服务
        RELAY_CLIENT_MSG = 5;               // 中继客户端消息 ( GATEWAY -> S / S -> GATEWAY )
        LOSE_ACCOUNT = 6;                   // 丢失账号 ( GATEWAY -> S )。只通知账号对应分配的服务
        RELAY_SERVER_MSG1 = 7;              // 中继服务器消息 ( S -> GATEWAY -> S)
        RELAY_SERVER_MSG2 = 8;              // 中继服务器消息 ( S -> GATEWAY -> S)
    }
}

// PING ( GATEWAY -> S )
// 参见 mgr.proto

// 注册服务器信息 ( S -> GATEWAY -> S )
// 参见 mgr.proto

// 丢失服务器信息( GATEWAY -> S )
// 参见 mgr.proto

// 注册账号 ( GATEWAY -> S )。只通知账号对应分配的服务
message MSG_GW_REGISTER_ACCOUNT {
    string Account = 1;                     // 账号
}

// 中继客户端消息 ( GATEWAY -> S / S -> GATEWAY )
message MSG_GW_RELAY_CLIENT_MSG {
    string Account = 1;                     // 账号。S -> GATEWAY 时，该字段为空，则表示 GATEWAY 需要把该消息发给所有客户端
    uint32 CMD = 2;                         // 消息号（真实消息号，已脱掉消息偏移量）
    bytes Data = 3;                         // 数据
    uint32 Flag = 4;                        // 数据块标志
}


// 丢失账号 ( GATEWAY -> S )。只通知账号对应分配的服务
message MSG_GW_LOSE_ACCOUNT {
    string Account = 1;                     // 账号
}

// 中继服务器消息 ( S -> GATEWAY -> S)
message RELAY_SERVER_MSG_TYPE {
    enum ENUM {
        BROADCAST = 0;
        RANDOM = 1;
    }
}
message MSG_GW_RELAY_SERVER_MSG1 {
    SERVER_ID SourceID = 1;                 // 服务ID（源）
    uint32 SourceType = 2;                  // 服务类型（源）
    uint32 TargetType = 3;                  // 服务类型（目标）
    RELAY_SERVER_MSG_TYPE.ENUM SendType = 4;// 发送类型。 0 广播； 1 随机一个
    uint32 CMD = 5;                         // 消息号
    bytes Data = 6;                         // 数据
    uint32 Flag = 7;                        // 数据块标志
}

// 中继服务器消息 ( S -> GATEWAY -> S)
message MSG_GW_RELAY_SERVER_MSG2 {
    SERVER_ID SourceID = 1;                 // 服务ID（源）
    uint32 SourceType = 2;                  // 服务类型（源）
    SERVER_ID TargetID = 3;                 // 服务ID（目标）
    uint32 CMD = 4;                         // 消息号
    bytes Data = 5;                         // 数据
    uint32 Flag = 6;                        // 数据块标志
}
