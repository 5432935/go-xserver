// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway.proto

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		gateway.proto
		login.proto

	It has these top-level messages:
		CMD_GATEWAY
		ENUM_VERIFY_TOKEN_ERROR
		ROLE_BASE_INFO
		MSG_VERIFY_TOKEN
		MSG_VERIFY_TOKEN_RESULT
		CMD_LOGIN
		ENUM_LOGIN_MODE
		ENUM_LOGIN_ERROR
		MSG_LOGIN
		MSG_LOGIN_RESULT
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CMD_GATEWAY_ENUM int32

const (
	CMD_GATEWAY_INVALID      CMD_GATEWAY_ENUM = 0
	CMD_GATEWAY_VERIFY_TOKEN CMD_GATEWAY_ENUM = 1
)

var CMD_GATEWAY_ENUM_name = map[int32]string{
	0: "INVALID",
	1: "VERIFY_TOKEN",
}
var CMD_GATEWAY_ENUM_value = map[string]int32{
	"INVALID":      0,
	"VERIFY_TOKEN": 1,
}

func (x CMD_GATEWAY_ENUM) String() string {
	return proto.EnumName(CMD_GATEWAY_ENUM_name, int32(x))
}
func (CMD_GATEWAY_ENUM) EnumDescriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0, 0} }

type ENUM_VERIFY_TOKEN_ERROR_ENUM int32

const (
	ENUM_VERIFY_TOKEN_ERROR_OK           ENUM_VERIFY_TOKEN_ERROR_ENUM = 0
	ENUM_VERIFY_TOKEN_ERROR_VERIFY_FAIL  ENUM_VERIFY_TOKEN_ERROR_ENUM = 1
	ENUM_VERIFY_TOKEN_ERROR_SYSTEM_ERROR ENUM_VERIFY_TOKEN_ERROR_ENUM = 2
)

var ENUM_VERIFY_TOKEN_ERROR_ENUM_name = map[int32]string{
	0: "OK",
	1: "VERIFY_FAIL",
	2: "SYSTEM_ERROR",
}
var ENUM_VERIFY_TOKEN_ERROR_ENUM_value = map[string]int32{
	"OK":           0,
	"VERIFY_FAIL":  1,
	"SYSTEM_ERROR": 2,
}

func (x ENUM_VERIFY_TOKEN_ERROR_ENUM) String() string {
	return proto.EnumName(ENUM_VERIFY_TOKEN_ERROR_ENUM_name, int32(x))
}
func (ENUM_VERIFY_TOKEN_ERROR_ENUM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{1, 0}
}

type CMD_GATEWAY struct {
}

func (m *CMD_GATEWAY) Reset()                    { *m = CMD_GATEWAY{} }
func (m *CMD_GATEWAY) String() string            { return proto.CompactTextString(m) }
func (*CMD_GATEWAY) ProtoMessage()               {}
func (*CMD_GATEWAY) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

// 验证令牌 ( C -> GATEWAY )
type ENUM_VERIFY_TOKEN_ERROR struct {
}

func (m *ENUM_VERIFY_TOKEN_ERROR) Reset()                    { *m = ENUM_VERIFY_TOKEN_ERROR{} }
func (m *ENUM_VERIFY_TOKEN_ERROR) String() string            { return proto.CompactTextString(m) }
func (*ENUM_VERIFY_TOKEN_ERROR) ProtoMessage()               {}
func (*ENUM_VERIFY_TOKEN_ERROR) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

type ROLE_BASE_INFO struct {
	RoleID   uint64 `protobuf:"varint,1,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	Userdata []byte `protobuf:"bytes,2,opt,name=Userdata,proto3" json:"Userdata,omitempty"`
}

func (m *ROLE_BASE_INFO) Reset()                    { *m = ROLE_BASE_INFO{} }
func (m *ROLE_BASE_INFO) String() string            { return proto.CompactTextString(m) }
func (*ROLE_BASE_INFO) ProtoMessage()               {}
func (*ROLE_BASE_INFO) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{2} }

func (m *ROLE_BASE_INFO) GetRoleID() uint64 {
	if m != nil {
		return m.RoleID
	}
	return 0
}

func (m *ROLE_BASE_INFO) GetUserdata() []byte {
	if m != nil {
		return m.Userdata
	}
	return nil
}

type MSG_VERIFY_TOKEN struct {
	Account string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *MSG_VERIFY_TOKEN) Reset()                    { *m = MSG_VERIFY_TOKEN{} }
func (m *MSG_VERIFY_TOKEN) String() string            { return proto.CompactTextString(m) }
func (*MSG_VERIFY_TOKEN) ProtoMessage()               {}
func (*MSG_VERIFY_TOKEN) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{3} }

func (m *MSG_VERIFY_TOKEN) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MSG_VERIFY_TOKEN) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type MSG_VERIFY_TOKEN_RESULT struct {
	Err   *ENUM_VERIFY_TOKEN_ERROR `protobuf:"bytes,1,opt,name=Err" json:"Err,omitempty"`
	Roles []*ROLE_BASE_INFO        `protobuf:"bytes,2,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *MSG_VERIFY_TOKEN_RESULT) Reset()                    { *m = MSG_VERIFY_TOKEN_RESULT{} }
func (m *MSG_VERIFY_TOKEN_RESULT) String() string            { return proto.CompactTextString(m) }
func (*MSG_VERIFY_TOKEN_RESULT) ProtoMessage()               {}
func (*MSG_VERIFY_TOKEN_RESULT) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{4} }

func (m *MSG_VERIFY_TOKEN_RESULT) GetErr() *ENUM_VERIFY_TOKEN_ERROR {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *MSG_VERIFY_TOKEN_RESULT) GetRoles() []*ROLE_BASE_INFO {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_GATEWAY)(nil), "protocol.CMD_GATEWAY")
	proto.RegisterType((*ENUM_VERIFY_TOKEN_ERROR)(nil), "protocol.ENUM_VERIFY_TOKEN_ERROR")
	proto.RegisterType((*ROLE_BASE_INFO)(nil), "protocol.ROLE_BASE_INFO")
	proto.RegisterType((*MSG_VERIFY_TOKEN)(nil), "protocol.MSG_VERIFY_TOKEN")
	proto.RegisterType((*MSG_VERIFY_TOKEN_RESULT)(nil), "protocol.MSG_VERIFY_TOKEN_RESULT")
	proto.RegisterEnum("protocol.CMD_GATEWAY_ENUM", CMD_GATEWAY_ENUM_name, CMD_GATEWAY_ENUM_value)
	proto.RegisterEnum("protocol.ENUM_VERIFY_TOKEN_ERROR_ENUM", ENUM_VERIFY_TOKEN_ERROR_ENUM_name, ENUM_VERIFY_TOKEN_ERROR_ENUM_value)
}
func (m *CMD_GATEWAY) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_GATEWAY) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ENUM_VERIFY_TOKEN_ERROR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ENUM_VERIFY_TOKEN_ERROR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ROLE_BASE_INFO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ROLE_BASE_INFO) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoleID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.RoleID))
	}
	if len(m.Userdata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Userdata)))
		i += copy(dAtA[i:], m.Userdata)
	}
	return i, nil
}

func (m *MSG_VERIFY_TOKEN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_VERIFY_TOKEN) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *MSG_VERIFY_TOKEN_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_VERIFY_TOKEN_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Err.Size()))
		n1, err := m.Err.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Roles) > 0 {
		for _, msg := range m.Roles {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Gateway(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gateway(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CMD_GATEWAY) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ENUM_VERIFY_TOKEN_ERROR) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ROLE_BASE_INFO) Size() (n int) {
	var l int
	_ = l
	if m.RoleID != 0 {
		n += 1 + sovGateway(uint64(m.RoleID))
	}
	l = len(m.Userdata)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *MSG_VERIFY_TOKEN) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *MSG_VERIFY_TOKEN_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CMD_GATEWAY) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_GATEWAY: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_GATEWAY: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ENUM_VERIFY_TOKEN_ERROR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ENUM_VERIFY_TOKEN_ERROR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ENUM_VERIFY_TOKEN_ERROR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ROLE_BASE_INFO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ROLE_BASE_INFO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ROLE_BASE_INFO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			m.RoleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userdata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userdata = append(m.Userdata[:0], dAtA[iNdEx:postIndex]...)
			if m.Userdata == nil {
				m.Userdata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_VERIFY_TOKEN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_VERIFY_TOKEN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_VERIFY_TOKEN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_VERIFY_TOKEN_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_VERIFY_TOKEN_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_VERIFY_TOKEN_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ENUM_VERIFY_TOKEN_ERROR{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &ROLE_BASE_INFO{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gateway.proto", fileDescriptorGateway) }

var fileDescriptorGateway = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x3b, 0xe9, 0xfd, 0xa4, 0xea, 0x30, 0x88, 0x0d, 0x2e, 0x42, 0x1d, 0x10, 0xba, 0x0a,
	0xd8, 0xfa, 0x02, 0xa9, 0x99, 0x96, 0xd0, 0x5c, 0xe0, 0x24, 0xad, 0x74, 0x35, 0xc4, 0x1a, 0x5c,
	0x58, 0x1a, 0x49, 0x23, 0xe2, 0xc6, 0x67, 0xf0, 0xb1, 0x5c, 0xfa, 0x08, 0x52, 0x5f, 0x44, 0x92,
	0xb6, 0x6a, 0x05, 0x57, 0xc3, 0x3f, 0x7c, 0xff, 0xc7, 0x39, 0x07, 0x0e, 0xee, 0xa2, 0x2c, 0x7e,
	0x8a, 0x9e, 0x8d, 0x87, 0x34, 0xc9, 0x12, 0xd6, 0x28, 0x9e, 0x79, 0xb2, 0xe0, 0x97, 0xa0, 0x5e,
	0xb9, 0x96, 0x1c, 0x99, 0xa1, 0xb8, 0x36, 0x67, 0xfc, 0x1c, 0x2a, 0xc2, 0x9b, 0xb8, 0x4c, 0x85,
	0xba, 0xed, 0x4d, 0x4d, 0xc7, 0xb6, 0x68, 0x89, 0x51, 0x68, 0x4d, 0x05, 0xda, 0xc3, 0x99, 0x0c,
	0xfd, 0xb1, 0xf0, 0x28, 0xe1, 0x0e, 0xb4, 0x73, 0x4c, 0xfe, 0xfe, 0x96, 0x02, 0xd1, 0x47, 0x7e,
	0xb1, 0x35, 0xd4, 0x40, 0xf1, 0xc7, 0xb4, 0xc4, 0x8e, 0x40, 0xdd, 0x52, 0x43, 0xd3, 0x76, 0x28,
	0xc9, 0x6d, 0xc1, 0x2c, 0x08, 0x85, 0xbb, 0x29, 0x50, 0x85, 0x5b, 0x70, 0x88, 0xbe, 0x23, 0xe4,
	0xc0, 0x0c, 0x84, 0xb4, 0xbd, 0xa1, 0xcf, 0x4e, 0xa0, 0x86, 0xc9, 0x22, 0xb6, 0x2d, 0x8d, 0x74,
	0x48, 0xb7, 0x82, 0xdb, 0xc4, 0x4e, 0xa1, 0x31, 0x59, 0xc5, 0xe9, 0x6d, 0x94, 0x45, 0x9a, 0xd2,
	0x21, 0xdd, 0x16, 0x7e, 0x67, 0x3e, 0x00, 0xea, 0x06, 0xa3, 0xbd, 0x91, 0x98, 0x06, 0x75, 0x73,
	0x3e, 0x4f, 0x1e, 0x97, 0x59, 0x21, 0x6a, 0xe2, 0x2e, 0xb2, 0x63, 0xa8, 0x86, 0xc9, 0x7d, 0xbc,
	0x2c, 0x34, 0x4d, 0xdc, 0x04, 0xfe, 0x02, 0xed, 0xbf, 0x0e, 0x89, 0x22, 0x98, 0x38, 0x21, 0xeb,
	0x43, 0x59, 0xa4, 0x69, 0xa1, 0x51, 0x7b, 0x67, 0xc6, 0xee, 0x80, 0xc6, 0x3f, 0x77, 0xc0, 0x9c,
	0x66, 0x06, 0x54, 0xf3, 0xc9, 0x57, 0x9a, 0xd2, 0x29, 0x77, 0xd5, 0x9e, 0xf6, 0x53, 0xdb, 0x5f,
	0x18, 0x37, 0xd8, 0x80, 0xbe, 0xad, 0x75, 0xf2, 0xbe, 0xd6, 0xc9, 0xc7, 0x5a, 0x27, 0xaf, 0x9f,
	0x7a, 0xe9, 0xa6, 0x56, 0x34, 0xfa, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x34, 0x03, 0x76,
	0xc1, 0x01, 0x00, 0x00,
}
