// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lobby.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CMD_LOBBY_ENUM int32

const (
	CMD_LOBBY_INVALID        CMD_LOBBY_ENUM = 0
	CMD_LOBBY_QUERY_ROLELIST CMD_LOBBY_ENUM = 1
	CMD_LOBBY_ENTER_GAME     CMD_LOBBY_ENUM = 2
	CMD_LOBBY_MSGCMDOFFSET   CMD_LOBBY_ENUM = 4000
)

var CMD_LOBBY_ENUM_name = map[int32]string{
	0:    "INVALID",
	1:    "QUERY_ROLELIST",
	2:    "ENTER_GAME",
	4000: "MSGCMDOFFSET",
}
var CMD_LOBBY_ENUM_value = map[string]int32{
	"INVALID":        0,
	"QUERY_ROLELIST": 1,
	"ENTER_GAME":     2,
	"MSGCMDOFFSET":   4000,
}

func (x CMD_LOBBY_ENUM) String() string {
	return proto.EnumName(CMD_LOBBY_ENUM_name, int32(x))
}
func (CMD_LOBBY_ENUM) EnumDescriptor() ([]byte, []int) { return fileDescriptorLobby, []int{0, 0} }

type ENUM_LOBBY_COMMON_ERROR_ENUM int32

const (
	ENUM_LOBBY_COMMON_ERROR_OK           ENUM_LOBBY_COMMON_ERROR_ENUM = 0
	ENUM_LOBBY_COMMON_ERROR_SYSTEM_ERROR ENUM_LOBBY_COMMON_ERROR_ENUM = 1
)

var ENUM_LOBBY_COMMON_ERROR_ENUM_name = map[int32]string{
	0: "OK",
	1: "SYSTEM_ERROR",
}
var ENUM_LOBBY_COMMON_ERROR_ENUM_value = map[string]int32{
	"OK":           0,
	"SYSTEM_ERROR": 1,
}

func (x ENUM_LOBBY_COMMON_ERROR_ENUM) String() string {
	return proto.EnumName(ENUM_LOBBY_COMMON_ERROR_ENUM_name, int32(x))
}
func (ENUM_LOBBY_COMMON_ERROR_ENUM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLobby, []int{1, 0}
}

type CMD_LOBBY struct {
}

func (m *CMD_LOBBY) Reset()                    { *m = CMD_LOBBY{} }
func (m *CMD_LOBBY) String() string            { return proto.CompactTextString(m) }
func (*CMD_LOBBY) ProtoMessage()               {}
func (*CMD_LOBBY) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{0} }

type ENUM_LOBBY_COMMON_ERROR struct {
}

func (m *ENUM_LOBBY_COMMON_ERROR) Reset()                    { *m = ENUM_LOBBY_COMMON_ERROR{} }
func (m *ENUM_LOBBY_COMMON_ERROR) String() string            { return proto.CompactTextString(m) }
func (*ENUM_LOBBY_COMMON_ERROR) ProtoMessage()               {}
func (*ENUM_LOBBY_COMMON_ERROR) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{1} }

// 获取角色信息 ( C -> LOBBY )
type MSG_LOBBY_QUERY_ROLELIST struct {
}

func (m *MSG_LOBBY_QUERY_ROLELIST) Reset()                    { *m = MSG_LOBBY_QUERY_ROLELIST{} }
func (m *MSG_LOBBY_QUERY_ROLELIST) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_QUERY_ROLELIST) ProtoMessage()               {}
func (*MSG_LOBBY_QUERY_ROLELIST) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{2} }

type MSG_LOBBY_QUERY_ROLELIST_RESULT struct {
	Err   ENUM_LOBBY_COMMON_ERROR_ENUM `protobuf:"varint,1,opt,name=Err,proto3,enum=protocol.ENUM_LOBBY_COMMON_ERROR_ENUM" json:"Err,omitempty"`
	Roles []*ROLE_BASE_INFO            `protobuf:"bytes,2,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) Reset()         { *m = MSG_LOBBY_QUERY_ROLELIST_RESULT{} }
func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) String() string { return proto.CompactTextString(m) }
func (*MSG_LOBBY_QUERY_ROLELIST_RESULT) ProtoMessage()    {}
func (*MSG_LOBBY_QUERY_ROLELIST_RESULT) Descriptor() ([]byte, []int) {
	return fileDescriptorLobby, []int{3}
}

func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) GetErr() ENUM_LOBBY_COMMON_ERROR_ENUM {
	if m != nil {
		return m.Err
	}
	return ENUM_LOBBY_COMMON_ERROR_OK
}

func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) GetRoles() []*ROLE_BASE_INFO {
	if m != nil {
		return m.Roles
	}
	return nil
}

// 进入游戏 ( C -> LOBBY )
type MSG_LOBBY_ENTER_GAME struct {
	RoleID uint64 `protobuf:"varint,1,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
}

func (m *MSG_LOBBY_ENTER_GAME) Reset()                    { *m = MSG_LOBBY_ENTER_GAME{} }
func (m *MSG_LOBBY_ENTER_GAME) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_ENTER_GAME) ProtoMessage()               {}
func (*MSG_LOBBY_ENTER_GAME) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{4} }

func (m *MSG_LOBBY_ENTER_GAME) GetRoleID() uint64 {
	if m != nil {
		return m.RoleID
	}
	return 0
}

type MSG_LOBBY_ENTER_GAME_RESULT struct {
	Err        ENUM_LOBBY_COMMON_ERROR_ENUM `protobuf:"varint,1,opt,name=Err,proto3,enum=protocol.ENUM_LOBBY_COMMON_ERROR_ENUM" json:"Err,omitempty"`
	DetailInfo *ROLE_DETAIL_INFO            `protobuf:"bytes,2,opt,name=DetailInfo" json:"DetailInfo,omitempty"`
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) Reset()                    { *m = MSG_LOBBY_ENTER_GAME_RESULT{} }
func (m *MSG_LOBBY_ENTER_GAME_RESULT) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_ENTER_GAME_RESULT) ProtoMessage()               {}
func (*MSG_LOBBY_ENTER_GAME_RESULT) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{5} }

func (m *MSG_LOBBY_ENTER_GAME_RESULT) GetErr() ENUM_LOBBY_COMMON_ERROR_ENUM {
	if m != nil {
		return m.Err
	}
	return ENUM_LOBBY_COMMON_ERROR_OK
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) GetDetailInfo() *ROLE_DETAIL_INFO {
	if m != nil {
		return m.DetailInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_LOBBY)(nil), "protocol.CMD_LOBBY")
	proto.RegisterType((*ENUM_LOBBY_COMMON_ERROR)(nil), "protocol.ENUM_LOBBY_COMMON_ERROR")
	proto.RegisterType((*MSG_LOBBY_QUERY_ROLELIST)(nil), "protocol.MSG_LOBBY_QUERY_ROLELIST")
	proto.RegisterType((*MSG_LOBBY_QUERY_ROLELIST_RESULT)(nil), "protocol.MSG_LOBBY_QUERY_ROLELIST_RESULT")
	proto.RegisterType((*MSG_LOBBY_ENTER_GAME)(nil), "protocol.MSG_LOBBY_ENTER_GAME")
	proto.RegisterType((*MSG_LOBBY_ENTER_GAME_RESULT)(nil), "protocol.MSG_LOBBY_ENTER_GAME_RESULT")
	proto.RegisterEnum("protocol.CMD_LOBBY_ENUM", CMD_LOBBY_ENUM_name, CMD_LOBBY_ENUM_value)
	proto.RegisterEnum("protocol.ENUM_LOBBY_COMMON_ERROR_ENUM", ENUM_LOBBY_COMMON_ERROR_ENUM_name, ENUM_LOBBY_COMMON_ERROR_ENUM_value)
}
func (m *CMD_LOBBY) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_LOBBY) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ENUM_LOBBY_COMMON_ERROR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ENUM_LOBBY_COMMON_ERROR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MSG_LOBBY_QUERY_ROLELIST) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_QUERY_ROLELIST) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	if len(m.Roles) > 0 {
		for _, msg := range m.Roles {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLobby(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MSG_LOBBY_ENTER_GAME) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_ENTER_GAME) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoleID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.RoleID))
	}
	return i, nil
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	if m.DetailInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.DetailInfo.Size()))
		n1, err := m.DetailInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Lobby(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lobby(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLobby(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CMD_LOBBY) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ENUM_LOBBY_COMMON_ERROR) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MSG_LOBBY_QUERY_ROLELIST) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *MSG_LOBBY_ENTER_GAME) Size() (n int) {
	var l int
	_ = l
	if m.RoleID != 0 {
		n += 1 + sovLobby(uint64(m.RoleID))
	}
	return n
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	if m.DetailInfo != nil {
		l = m.DetailInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func sovLobby(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLobby(x uint64) (n int) {
	return sovLobby(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CMD_LOBBY) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_LOBBY: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_LOBBY: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ENUM_LOBBY_COMMON_ERROR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ENUM_LOBBY_COMMON_ERROR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ENUM_LOBBY_COMMON_ERROR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_QUERY_ROLELIST) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_QUERY_ROLELIST: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_QUERY_ROLELIST: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_QUERY_ROLELIST_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_QUERY_ROLELIST_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_QUERY_ROLELIST_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ENUM_LOBBY_COMMON_ERROR_ENUM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &ROLE_BASE_INFO{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_ENTER_GAME) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			m.RoleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_ENTER_GAME_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ENUM_LOBBY_COMMON_ERROR_ENUM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailInfo == nil {
				m.DetailInfo = &ROLE_DETAIL_INFO{}
			}
			if err := m.DetailInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLobby(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLobby
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLobby(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLobby = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLobby   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lobby.proto", fileDescriptorLobby) }

var fileDescriptorLobby = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x3b, 0x69, 0x6f, 0xef, 0xbd, 0x27, 0xa5, 0xcc, 0x1d, 0x2e, 0xf7, 0x86, 0x0a, 0x69,
	0x98, 0x85, 0x74, 0x95, 0x45, 0xdd, 0x88, 0xae, 0x92, 0x66, 0x5a, 0xa2, 0x99, 0x0c, 0xce, 0xa4,
	0x4a, 0x57, 0x83, 0x2d, 0x15, 0x84, 0x68, 0xa4, 0xad, 0x0b, 0x9f, 0xc1, 0x8d, 0xe0, 0x0b, 0xf8,
	0x38, 0x2e, 0x7d, 0x04, 0xa9, 0x2f, 0x22, 0x49, 0x2a, 0x55, 0xb1, 0x2b, 0x57, 0x21, 0xe7, 0xff,
	0xff, 0xf3, 0x7f, 0x73, 0xc0, 0x4c, 0xb3, 0xf1, 0xf8, 0xc6, 0xbd, 0x9a, 0x65, 0x8b, 0x8c, 0xfc,
	0x2a, 0x3e, 0x93, 0x2c, 0x6d, 0x91, 0x62, 0xac, 0x27, 0xd7, 0xf3, 0x45, 0x76, 0x51, 0xaa, 0xf4,
	0x04, 0x7e, 0xf7, 0x78, 0xa0, 0x23, 0xe1, 0xfb, 0x23, 0x7a, 0x00, 0x35, 0x16, 0x0f, 0x39, 0x31,
	0xe1, 0x67, 0x18, 0x1f, 0x7b, 0x51, 0x18, 0xe0, 0x0a, 0x21, 0xd0, 0x3c, 0x1a, 0x32, 0x39, 0xd2,
	0x52, 0x44, 0x2c, 0x0a, 0x55, 0x82, 0x11, 0x69, 0x02, 0xb0, 0x38, 0x61, 0x52, 0x0f, 0x3c, 0xce,
	0xb0, 0x41, 0xfe, 0x40, 0x83, 0xab, 0x41, 0x8f, 0x07, 0xa2, 0xdf, 0x57, 0x2c, 0xc1, 0x0f, 0x6d,
	0xba, 0x0f, 0xff, 0xf3, 0x5d, 0xe5, 0x66, 0xdd, 0x13, 0x9c, 0x8b, 0x58, 0x33, 0x29, 0x85, 0xa4,
	0xce, 0xaa, 0xa6, 0x0e, 0x86, 0x38, 0xc4, 0x15, 0x82, 0xa1, 0xa1, 0x46, 0x2a, 0x61, 0xbc, 0xd4,
	0x31, 0xa2, 0x2d, 0xb0, 0xb8, 0x1a, 0xac, 0xb2, 0x1f, 0xdb, 0xe9, 0x2d, 0x82, 0xf6, 0x26, 0x51,
	0x4b, 0xa6, 0x86, 0x51, 0x42, 0x76, 0xa1, 0xca, 0x66, 0x33, 0x0b, 0x39, 0xa8, 0xd3, 0xec, 0x6e,
	0xbb, 0x6f, 0x17, 0x70, 0x37, 0x10, 0x15, 0x73, 0x99, 0x47, 0x88, 0x0b, 0x3f, 0x64, 0x96, 0x4e,
	0xe7, 0x96, 0xe1, 0x54, 0x3b, 0x66, 0xd7, 0x5a, 0x67, 0xf3, 0x0e, 0xed, 0x7b, 0x8a, 0xe9, 0x30,
	0xee, 0x0b, 0x59, 0xda, 0xa8, 0x0b, 0x7f, 0xd7, 0x30, 0xeb, 0x9b, 0x90, 0x7f, 0x50, 0xcf, 0x0d,
	0x61, 0x50, 0x40, 0xd4, 0xe4, 0xea, 0x8f, 0xde, 0x23, 0xd8, 0xfa, 0x2a, 0xf0, 0x7d, 0xf2, 0x3d,
	0x80, 0x60, 0xba, 0x38, 0x3d, 0x4f, 0xc3, 0xcb, 0xb3, 0xcc, 0x32, 0x1c, 0xd4, 0x31, 0xbb, 0xad,
	0x4f, 0xf8, 0x01, 0x4b, 0xbc, 0x30, 0x2a, 0x1f, 0xf0, 0xce, 0xed, 0xe3, 0xc7, 0xa5, 0x8d, 0x9e,
	0x96, 0x36, 0x7a, 0x5e, 0xda, 0xe8, 0xee, 0xc5, 0xae, 0x8c, 0xeb, 0x45, 0x70, 0xe7, 0x35, 0x00,
	0x00, 0xff, 0xff, 0xf9, 0x13, 0x29, 0x4c, 0x4b, 0x02, 0x00, 0x00,
}
