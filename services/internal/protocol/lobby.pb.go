// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lobby.proto

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		lobby.proto
		lobby_custom.proto
		match.proto

	It has these top-level messages:
		CMD_LOBBY
		ENUM_LOBBY_COMMON_ERROR
		MSG_LOBBY_LOGIN
		MSG_LOBBY_LOGIN_RESULT
		MSG_LOBBY_CREATE_ROLE
		MSG_LOBBY_CREATE_ROLE_RESULT
		MSG_LOBBY_ENTER_GAME
		MSG_LOBBY_ENTER_GAME_RESULT
		MSG_LOBBY_CHAT
		MSG_LOBBY_MATCH
		MSG_LOBBY_MATCH_RESULT
		ROLE_BASE_INFO
		ROLE_DETAIL_INFO
		CMD_MATCH
		ENUM_MATCH_COMMON_ERROR
		MSG_MATCH_MATCH
		MSG_MATCH_MATCH_RESULT
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CMD_LOBBY_ENUM int32

const (
	CMD_LOBBY_INVALID      CMD_LOBBY_ENUM = 0
	CMD_LOBBY_LOGIN        CMD_LOBBY_ENUM = 1
	CMD_LOBBY_CREATE_ROLE  CMD_LOBBY_ENUM = 2
	CMD_LOBBY_ENTER_GAME   CMD_LOBBY_ENUM = 3
	CMD_LOBBY_CHAT         CMD_LOBBY_ENUM = 4
	CMD_LOBBY_MATCH        CMD_LOBBY_ENUM = 5
	CMD_LOBBY_MATCH_RESULT CMD_LOBBY_ENUM = 6
	CMD_LOBBY_MSGCMDOFFSET CMD_LOBBY_ENUM = 4000
)

var CMD_LOBBY_ENUM_name = map[int32]string{
	0:    "INVALID",
	1:    "LOGIN",
	2:    "CREATE_ROLE",
	3:    "ENTER_GAME",
	4:    "CHAT",
	5:    "MATCH",
	6:    "MATCH_RESULT",
	4000: "MSGCMDOFFSET",
}
var CMD_LOBBY_ENUM_value = map[string]int32{
	"INVALID":      0,
	"LOGIN":        1,
	"CREATE_ROLE":  2,
	"ENTER_GAME":   3,
	"CHAT":         4,
	"MATCH":        5,
	"MATCH_RESULT": 6,
	"MSGCMDOFFSET": 4000,
}

func (x CMD_LOBBY_ENUM) String() string {
	return proto.EnumName(CMD_LOBBY_ENUM_name, int32(x))
}
func (CMD_LOBBY_ENUM) EnumDescriptor() ([]byte, []int) { return fileDescriptorLobby, []int{0, 0} }

type ENUM_LOBBY_COMMON_ERROR_ENUM int32

const (
	ENUM_LOBBY_COMMON_ERROR_OK                    ENUM_LOBBY_COMMON_ERROR_ENUM = 0
	ENUM_LOBBY_COMMON_ERROR_SYSTEM_ERROR          ENUM_LOBBY_COMMON_ERROR_ENUM = 1
	ENUM_LOBBY_COMMON_ERROR_DUPLICATION_ROLE_NAME ENUM_LOBBY_COMMON_ERROR_ENUM = 2
)

var ENUM_LOBBY_COMMON_ERROR_ENUM_name = map[int32]string{
	0: "OK",
	1: "SYSTEM_ERROR",
	2: "DUPLICATION_ROLE_NAME",
}
var ENUM_LOBBY_COMMON_ERROR_ENUM_value = map[string]int32{
	"OK":                    0,
	"SYSTEM_ERROR":          1,
	"DUPLICATION_ROLE_NAME": 2,
}

func (x ENUM_LOBBY_COMMON_ERROR_ENUM) String() string {
	return proto.EnumName(ENUM_LOBBY_COMMON_ERROR_ENUM_name, int32(x))
}
func (ENUM_LOBBY_COMMON_ERROR_ENUM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLobby, []int{1, 0}
}

type CMD_LOBBY struct {
}

func (m *CMD_LOBBY) Reset()                    { *m = CMD_LOBBY{} }
func (m *CMD_LOBBY) String() string            { return proto.CompactTextString(m) }
func (*CMD_LOBBY) ProtoMessage()               {}
func (*CMD_LOBBY) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{0} }

type ENUM_LOBBY_COMMON_ERROR struct {
}

func (m *ENUM_LOBBY_COMMON_ERROR) Reset()                    { *m = ENUM_LOBBY_COMMON_ERROR{} }
func (m *ENUM_LOBBY_COMMON_ERROR) String() string            { return proto.CompactTextString(m) }
func (*ENUM_LOBBY_COMMON_ERROR) ProtoMessage()               {}
func (*ENUM_LOBBY_COMMON_ERROR) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{1} }

// 登录，获取角色信息 ( C -> LOBBY )
type MSG_LOBBY_LOGIN struct {
}

func (m *MSG_LOBBY_LOGIN) Reset()                    { *m = MSG_LOBBY_LOGIN{} }
func (m *MSG_LOBBY_LOGIN) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_LOGIN) ProtoMessage()               {}
func (*MSG_LOBBY_LOGIN) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{2} }

type MSG_LOBBY_LOGIN_RESULT struct {
	Err   ENUM_LOBBY_COMMON_ERROR_ENUM `protobuf:"varint,1,opt,name=Err,proto3,enum=protocol.ENUM_LOBBY_COMMON_ERROR_ENUM" json:"Err,omitempty"`
	Roles []*ROLE_BASE_INFO            `protobuf:"bytes,2,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *MSG_LOBBY_LOGIN_RESULT) Reset()                    { *m = MSG_LOBBY_LOGIN_RESULT{} }
func (m *MSG_LOBBY_LOGIN_RESULT) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_LOGIN_RESULT) ProtoMessage()               {}
func (*MSG_LOBBY_LOGIN_RESULT) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{3} }

func (m *MSG_LOBBY_LOGIN_RESULT) GetErr() ENUM_LOBBY_COMMON_ERROR_ENUM {
	if m != nil {
		return m.Err
	}
	return ENUM_LOBBY_COMMON_ERROR_OK
}

func (m *MSG_LOBBY_LOGIN_RESULT) GetRoles() []*ROLE_BASE_INFO {
	if m != nil {
		return m.Roles
	}
	return nil
}

// 创建角色 ( C -> LOBBY )
type MSG_LOBBY_CREATE_ROLE struct {
	Slot uint32          `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	Info *ROLE_BASE_INFO `protobuf:"bytes,2,opt,name=Info" json:"Info,omitempty"`
}

func (m *MSG_LOBBY_CREATE_ROLE) Reset()                    { *m = MSG_LOBBY_CREATE_ROLE{} }
func (m *MSG_LOBBY_CREATE_ROLE) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_CREATE_ROLE) ProtoMessage()               {}
func (*MSG_LOBBY_CREATE_ROLE) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{4} }

func (m *MSG_LOBBY_CREATE_ROLE) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *MSG_LOBBY_CREATE_ROLE) GetInfo() *ROLE_BASE_INFO {
	if m != nil {
		return m.Info
	}
	return nil
}

type MSG_LOBBY_CREATE_ROLE_RESULT struct {
	Err ENUM_LOBBY_COMMON_ERROR_ENUM `protobuf:"varint,1,opt,name=Err,proto3,enum=protocol.ENUM_LOBBY_COMMON_ERROR_ENUM" json:"Err,omitempty"`
}

func (m *MSG_LOBBY_CREATE_ROLE_RESULT) Reset()         { *m = MSG_LOBBY_CREATE_ROLE_RESULT{} }
func (m *MSG_LOBBY_CREATE_ROLE_RESULT) String() string { return proto.CompactTextString(m) }
func (*MSG_LOBBY_CREATE_ROLE_RESULT) ProtoMessage()    {}
func (*MSG_LOBBY_CREATE_ROLE_RESULT) Descriptor() ([]byte, []int) {
	return fileDescriptorLobby, []int{5}
}

func (m *MSG_LOBBY_CREATE_ROLE_RESULT) GetErr() ENUM_LOBBY_COMMON_ERROR_ENUM {
	if m != nil {
		return m.Err
	}
	return ENUM_LOBBY_COMMON_ERROR_OK
}

// 进入游戏 ( C -> LOBBY )
type MSG_LOBBY_ENTER_GAME struct {
	Slot uint32 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
}

func (m *MSG_LOBBY_ENTER_GAME) Reset()                    { *m = MSG_LOBBY_ENTER_GAME{} }
func (m *MSG_LOBBY_ENTER_GAME) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_ENTER_GAME) ProtoMessage()               {}
func (*MSG_LOBBY_ENTER_GAME) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{6} }

func (m *MSG_LOBBY_ENTER_GAME) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type MSG_LOBBY_ENTER_GAME_RESULT struct {
	Err        ENUM_LOBBY_COMMON_ERROR_ENUM `protobuf:"varint,1,opt,name=Err,proto3,enum=protocol.ENUM_LOBBY_COMMON_ERROR_ENUM" json:"Err,omitempty"`
	DetailInfo *ROLE_DETAIL_INFO            `protobuf:"bytes,2,opt,name=DetailInfo" json:"DetailInfo,omitempty"`
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) Reset()                    { *m = MSG_LOBBY_ENTER_GAME_RESULT{} }
func (m *MSG_LOBBY_ENTER_GAME_RESULT) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_ENTER_GAME_RESULT) ProtoMessage()               {}
func (*MSG_LOBBY_ENTER_GAME_RESULT) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{7} }

func (m *MSG_LOBBY_ENTER_GAME_RESULT) GetErr() ENUM_LOBBY_COMMON_ERROR_ENUM {
	if m != nil {
		return m.Err
	}
	return ENUM_LOBBY_COMMON_ERROR_OK
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) GetDetailInfo() *ROLE_DETAIL_INFO {
	if m != nil {
		return m.DetailInfo
	}
	return nil
}

// 聊天 ( C -> LOBBY -> C )
type MSG_LOBBY_CHAT struct {
	From string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Txt  string `protobuf:"bytes,3,opt,name=Txt,proto3" json:"Txt,omitempty"`
}

func (m *MSG_LOBBY_CHAT) Reset()                    { *m = MSG_LOBBY_CHAT{} }
func (m *MSG_LOBBY_CHAT) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_CHAT) ProtoMessage()               {}
func (*MSG_LOBBY_CHAT) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{8} }

func (m *MSG_LOBBY_CHAT) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MSG_LOBBY_CHAT) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MSG_LOBBY_CHAT) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

// 匹配 ( C -> LOBBY )
type MSG_LOBBY_MATCH struct {
}

func (m *MSG_LOBBY_MATCH) Reset()                    { *m = MSG_LOBBY_MATCH{} }
func (m *MSG_LOBBY_MATCH) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_MATCH) ProtoMessage()               {}
func (*MSG_LOBBY_MATCH) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{9} }

// 匹配 ( LOBBY -> C )
type MSG_LOBBY_MATCH_RESULT struct {
	Err   ENUM_LOBBY_COMMON_ERROR_ENUM `protobuf:"varint,1,opt,name=Err,proto3,enum=protocol.ENUM_LOBBY_COMMON_ERROR_ENUM" json:"Err,omitempty"`
	Roles []*ROLE_BASE_INFO            `protobuf:"bytes,2,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *MSG_LOBBY_MATCH_RESULT) Reset()                    { *m = MSG_LOBBY_MATCH_RESULT{} }
func (m *MSG_LOBBY_MATCH_RESULT) String() string            { return proto.CompactTextString(m) }
func (*MSG_LOBBY_MATCH_RESULT) ProtoMessage()               {}
func (*MSG_LOBBY_MATCH_RESULT) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{10} }

func (m *MSG_LOBBY_MATCH_RESULT) GetErr() ENUM_LOBBY_COMMON_ERROR_ENUM {
	if m != nil {
		return m.Err
	}
	return ENUM_LOBBY_COMMON_ERROR_OK
}

func (m *MSG_LOBBY_MATCH_RESULT) GetRoles() []*ROLE_BASE_INFO {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*CMD_LOBBY)(nil), "protocol.CMD_LOBBY")
	proto.RegisterType((*ENUM_LOBBY_COMMON_ERROR)(nil), "protocol.ENUM_LOBBY_COMMON_ERROR")
	proto.RegisterType((*MSG_LOBBY_LOGIN)(nil), "protocol.MSG_LOBBY_LOGIN")
	proto.RegisterType((*MSG_LOBBY_LOGIN_RESULT)(nil), "protocol.MSG_LOBBY_LOGIN_RESULT")
	proto.RegisterType((*MSG_LOBBY_CREATE_ROLE)(nil), "protocol.MSG_LOBBY_CREATE_ROLE")
	proto.RegisterType((*MSG_LOBBY_CREATE_ROLE_RESULT)(nil), "protocol.MSG_LOBBY_CREATE_ROLE_RESULT")
	proto.RegisterType((*MSG_LOBBY_ENTER_GAME)(nil), "protocol.MSG_LOBBY_ENTER_GAME")
	proto.RegisterType((*MSG_LOBBY_ENTER_GAME_RESULT)(nil), "protocol.MSG_LOBBY_ENTER_GAME_RESULT")
	proto.RegisterType((*MSG_LOBBY_CHAT)(nil), "protocol.MSG_LOBBY_CHAT")
	proto.RegisterType((*MSG_LOBBY_MATCH)(nil), "protocol.MSG_LOBBY_MATCH")
	proto.RegisterType((*MSG_LOBBY_MATCH_RESULT)(nil), "protocol.MSG_LOBBY_MATCH_RESULT")
	proto.RegisterEnum("protocol.CMD_LOBBY_ENUM", CMD_LOBBY_ENUM_name, CMD_LOBBY_ENUM_value)
	proto.RegisterEnum("protocol.ENUM_LOBBY_COMMON_ERROR_ENUM", ENUM_LOBBY_COMMON_ERROR_ENUM_name, ENUM_LOBBY_COMMON_ERROR_ENUM_value)
}
func (m *CMD_LOBBY) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_LOBBY) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ENUM_LOBBY_COMMON_ERROR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ENUM_LOBBY_COMMON_ERROR) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MSG_LOBBY_LOGIN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_LOGIN) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MSG_LOBBY_LOGIN_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_LOGIN_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	if len(m.Roles) > 0 {
		for _, msg := range m.Roles {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLobby(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MSG_LOBBY_CREATE_ROLE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_CREATE_ROLE) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Slot))
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MSG_LOBBY_CREATE_ROLE_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_CREATE_ROLE_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	return i, nil
}

func (m *MSG_LOBBY_ENTER_GAME) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_ENTER_GAME) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Slot))
	}
	return i, nil
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	if m.DetailInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.DetailInfo.Size()))
		n2, err := m.DetailInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *MSG_LOBBY_CHAT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_CHAT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLobby(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLobby(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Txt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Txt)))
		i += copy(dAtA[i:], m.Txt)
	}
	return i, nil
}

func (m *MSG_LOBBY_MATCH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_MATCH) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MSG_LOBBY_MATCH_RESULT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_LOBBY_MATCH_RESULT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	if len(m.Roles) > 0 {
		for _, msg := range m.Roles {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLobby(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Lobby(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lobby(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLobby(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CMD_LOBBY) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ENUM_LOBBY_COMMON_ERROR) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MSG_LOBBY_LOGIN) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MSG_LOBBY_LOGIN_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func (m *MSG_LOBBY_CREATE_ROLE) Size() (n int) {
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovLobby(uint64(m.Slot))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *MSG_LOBBY_CREATE_ROLE_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	return n
}

func (m *MSG_LOBBY_ENTER_GAME) Size() (n int) {
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovLobby(uint64(m.Slot))
	}
	return n
}

func (m *MSG_LOBBY_ENTER_GAME_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	if m.DetailInfo != nil {
		l = m.DetailInfo.Size()
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *MSG_LOBBY_CHAT) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	l = len(m.Txt)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func (m *MSG_LOBBY_MATCH) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MSG_LOBBY_MATCH_RESULT) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovLobby(uint64(l))
		}
	}
	return n
}

func sovLobby(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLobby(x uint64) (n int) {
	return sovLobby(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CMD_LOBBY) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_LOBBY: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_LOBBY: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ENUM_LOBBY_COMMON_ERROR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ENUM_LOBBY_COMMON_ERROR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ENUM_LOBBY_COMMON_ERROR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_LOGIN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_LOGIN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_LOGIN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_LOGIN_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_LOGIN_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_LOGIN_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ENUM_LOBBY_COMMON_ERROR_ENUM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &ROLE_BASE_INFO{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_CREATE_ROLE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_CREATE_ROLE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_CREATE_ROLE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ROLE_BASE_INFO{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_CREATE_ROLE_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_CREATE_ROLE_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_CREATE_ROLE_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ENUM_LOBBY_COMMON_ERROR_ENUM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_ENTER_GAME) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_ENTER_GAME_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_ENTER_GAME_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ENUM_LOBBY_COMMON_ERROR_ENUM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailInfo == nil {
				m.DetailInfo = &ROLE_DETAIL_INFO{}
			}
			if err := m.DetailInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_CHAT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_CHAT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_CHAT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_MATCH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_MATCH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_MATCH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_LOBBY_MATCH_RESULT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_LOBBY_MATCH_RESULT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_LOBBY_MATCH_RESULT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (ENUM_LOBBY_COMMON_ERROR_ENUM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &ROLE_BASE_INFO{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLobby(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLobby
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLobby(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLobby = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLobby   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lobby.proto", fileDescriptorLobby) }

var fileDescriptorLobby = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x34, 0x2d, 0xeb, 0xeb, 0xe8, 0x3c, 0x8b, 0x41, 0x18, 0xa8, 0x54, 0x3e, 0xa0,
	0x09, 0xa1, 0x1e, 0xc6, 0x05, 0xc1, 0x29, 0x4d, 0x9c, 0x36, 0x22, 0x8e, 0x91, 0xe3, 0x4e, 0xf4,
	0x64, 0xd1, 0x69, 0x48, 0x48, 0x19, 0x46, 0x5d, 0x90, 0xd8, 0x95, 0x03, 0x67, 0x24, 0xbe, 0x00,
	0x1f, 0x87, 0x23, 0x1f, 0x01, 0x95, 0x2f, 0x82, 0xe2, 0x14, 0x35, 0x54, 0x85, 0xcb, 0xa4, 0x9d,
	0xf2, 0xf4, 0xfc, 0xde, 0x3f, 0x3f, 0xff, 0xfd, 0x87, 0x6e, 0x6e, 0xe6, 0xf3, 0xcb, 0xe1, 0xfb,
	0x85, 0x29, 0x0c, 0xd9, 0xb1, 0x9f, 0x53, 0x93, 0x1f, 0x12, 0xdb, 0xd6, 0xa7, 0x1f, 0x2e, 0x0a,
	0x73, 0x5e, 0x9d, 0xd2, 0xcf, 0x08, 0x3a, 0x01, 0x0f, 0x75, 0x22, 0x46, 0xa3, 0x19, 0xbd, 0x04,
	0x97, 0xa5, 0x53, 0x4e, 0xba, 0x70, 0x23, 0x4e, 0x4f, 0xfc, 0x24, 0x0e, 0x71, 0x83, 0x74, 0xa0,
	0x95, 0x88, 0x71, 0x9c, 0x62, 0x44, 0xf6, 0xa0, 0x1b, 0x48, 0xe6, 0x2b, 0xa6, 0xa5, 0x48, 0x18,
	0x76, 0x48, 0x0f, 0x80, 0xa5, 0x8a, 0x49, 0x3d, 0xf6, 0x39, 0xc3, 0x4d, 0xb2, 0x03, 0x6e, 0x30,
	0xf1, 0x15, 0x76, 0xcb, 0x2d, 0xee, 0xab, 0x60, 0x82, 0x5b, 0x04, 0xc3, 0xae, 0x2d, 0xb5, 0x64,
	0xd9, 0x34, 0x51, 0xb8, 0x4d, 0xf6, 0x61, 0x97, 0x67, 0xe3, 0x80, 0x87, 0x22, 0x8a, 0x32, 0xa6,
	0xf0, 0xb7, 0x07, 0xf4, 0x04, 0xee, 0x94, 0xbf, 0xae, 0x40, 0x74, 0x20, 0x38, 0x17, 0xa9, 0x66,
	0x52, 0x0a, 0x49, 0x9f, 0xaf, 0xa8, 0xda, 0xe0, 0x88, 0x17, 0xb8, 0x51, 0xea, 0x65, 0xb3, 0x4c,
	0x31, 0x5e, 0x9d, 0x63, 0x44, 0xee, 0xc2, 0x41, 0x38, 0x7d, 0x99, 0xc4, 0x81, 0xaf, 0x62, 0x91,
	0x5a, 0x38, 0x9d, 0x96, 0x44, 0x0e, 0xdd, 0x87, 0x3d, 0x9e, 0x8d, 0x57, 0xb2, 0xf6, 0x1e, 0xf4,
	0x13, 0x82, 0xdb, 0x1b, 0xbd, 0x15, 0x1a, 0x79, 0x0a, 0x4d, 0xb6, 0x58, 0x78, 0x68, 0x80, 0x8e,
	0x7a, 0xc7, 0x0f, 0x87, 0x7f, 0xac, 0x1b, 0xfe, 0x03, 0xcd, 0xf6, 0x65, 0xb9, 0x42, 0x86, 0xd0,
	0x92, 0x26, 0x3f, 0xbb, 0xf0, 0x9c, 0x41, 0xf3, 0xa8, 0x7b, 0xec, 0xad, 0x77, 0x2d, 0xcd, 0xc8,
	0xcf, 0x98, 0x8e, 0xd3, 0x48, 0xc8, 0x6a, 0x8c, 0xce, 0xe0, 0x60, 0xcd, 0x50, 0x33, 0x95, 0x10,
	0x70, 0xb3, 0xdc, 0x14, 0x96, 0xe1, 0xa6, 0xb4, 0x35, 0x79, 0x0c, 0x6e, 0xfc, 0xee, 0x8d, 0xf1,
	0x9c, 0x01, 0xfa, 0xaf, 0xb6, 0x9d, 0xa2, 0xaf, 0xe0, 0xfe, 0x56, 0xe9, 0x2b, 0x5f, 0x92, 0x3e,
	0x82, 0x5b, 0x6b, 0xe5, 0xf5, 0xc3, 0x6f, 0x63, 0xa6, 0x5f, 0x11, 0xdc, 0xdb, 0x36, 0x7c, 0x75,
	0xab, 0x9f, 0x01, 0x84, 0x67, 0xc5, 0xeb, 0xb7, 0x79, 0xcd, 0x93, 0xc3, 0x0d, 0x4f, 0x42, 0xa6,
	0xfc, 0x38, 0xa9, 0x5c, 0xa9, 0x4d, 0xd3, 0x08, 0x7a, 0x35, 0x6f, 0x26, 0xbe, 0x2a, 0xd9, 0xa3,
	0x85, 0x39, 0xb7, 0x20, 0x1d, 0x69, 0x6b, 0xd2, 0x03, 0x47, 0x55, 0xca, 0x1d, 0xe9, 0x28, 0x43,
	0x30, 0x34, 0xd5, 0xc7, 0xc2, 0x6b, 0xda, 0x46, 0x59, 0xfe, 0x1d, 0x2b, 0x9b, 0xee, 0x8d, 0x58,
	0xd5, 0x13, 0x7f, 0x7d, 0xb1, 0x1a, 0xe1, 0xef, 0xcb, 0x3e, 0xfa, 0xb1, 0xec, 0xa3, 0x9f, 0xcb,
	0x3e, 0xfa, 0xf2, 0xab, 0xdf, 0x98, 0xb7, 0xed, 0xc6, 0x93, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x26, 0xa4, 0xd2, 0xf0, 0x15, 0x04, 0x00, 0x00,
}
