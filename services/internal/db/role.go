/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"
	"fmt"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

// Role : 代表 1 个 redis 对象
type Role struct {
	Key  uint64
	name string

	dirtyDataInRole               map[string]interface{}
	dirtyDataForStructFiledInRole map[string]interface{}
	isLoadInRole                  bool
	dbKeyInRole                   string
	ddbNameInRole                 string
	expireInRole                  uint
}

// NewRole : NewRole 的构造函数
func NewRole(dbName string, key uint64) *Role {
	return &Role{
		Key:                           key,
		ddbNameInRole:                 dbName,
		dbKeyInRole:                   "Role:" + fmt.Sprintf("%d", key),
		dirtyDataInRole:               make(map[string]interface{}),
		dirtyDataForStructFiledInRole: make(map[string]interface{}),
	}
}

// HasKey : 是否存在 KEY
//          返回值，若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (objRole *Role) HasKey() (int, error) {
	db := go_redis_orm.GetDB(objRole.ddbNameInRole)
	val, err := redis.Int(db.Do("EXISTS", objRole.dbKeyInRole))
	if err != nil {
		return -1, err
	}
	return val, nil
}

// Load : 从 redis 加载数据
func (objRole *Role) Load() error {
	if objRole.isLoadInRole == true {
		return errors.New("alreay load")
	}
	db := go_redis_orm.GetDB(objRole.ddbNameInRole)
	val, err := redis.Values(db.Do("HGETALL", objRole.dbKeyInRole))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Name string `redis:"name"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	objRole.name = data.Name
	objRole.isLoadInRole = true
	return nil
}

// Save : 保存数据到 redis
func (objRole *Role) Save() error {
	if len(objRole.dirtyDataInRole) == 0 && len(objRole.dirtyDataForStructFiledInRole) == 0 {
		return nil
	}
	for k := range objRole.dirtyDataForStructFiledInRole {
		_ = k

	}
	db := go_redis_orm.GetDB(objRole.ddbNameInRole)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRole.dbKeyInRole).AddFlat(objRole.dirtyDataInRole)...); err != nil {
		return err
	}
	if objRole.expireInRole != 0 {
		if _, err := db.Do("EXPIRE", objRole.dbKeyInRole, objRole.expireInRole); err != nil {
			return err
		}
	}
	objRole.dirtyDataInRole = make(map[string]interface{})
	objRole.dirtyDataForStructFiledInRole = make(map[string]interface{})
	return nil
}

// Delete : 从 redis 删除数据
func (objRole *Role) Delete() error {
	db := go_redis_orm.GetDB(objRole.ddbNameInRole)
	_, err := db.Do("DEL", objRole.dbKeyInRole)
	if err == nil {
		objRole.isLoadInRole = false
		objRole.dirtyDataInRole = make(map[string]interface{})
		objRole.dirtyDataForStructFiledInRole = make(map[string]interface{})
	}
	return err
}

// IsLoad : 是否已经从 redis 导入数据
func (objRole *Role) IsLoad() bool {
	return objRole.isLoadInRole
}

// Expire : 向 redis 设置该对象过期时间
func (objRole *Role) Expire(v uint) {
	objRole.expireInRole = v
}

// DirtyData : 获取该对象目前已脏的数据
func (objRole *Role) DirtyData() (map[string]interface{}, error) {
	for k := range objRole.dirtyDataForStructFiledInRole {
		_ = k

	}
	data := make(map[string]interface{})
	for k, v := range objRole.dirtyDataInRole {
		data[k] = v
	}
	objRole.dirtyDataInRole = make(map[string]interface{})
	objRole.dirtyDataForStructFiledInRole = make(map[string]interface{})
	return data, nil
}

// Save2 : 保存数据到 redis 的第 2 种方法
func (objRole *Role) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(objRole.ddbNameInRole)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRole.dbKeyInRole).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if objRole.expireInRole != 0 {
		if _, err := db.Do("EXPIRE", objRole.dbKeyInRole, objRole.expireInRole); err != nil {
			return err
		}
	}
	return nil
}

// GetName : 获取字段值
func (objRole *Role) GetName() string {
	return objRole.name
}

// SetName : 设置字段值
func (objRole *Role) SetName(value string) {
	objRole.name = value
	objRole.dirtyDataInRole["name"] = string([]byte(value))
}
