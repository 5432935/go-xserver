/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"
	"fmt"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

// RoleBase : 代表 1 个 redis 对象
type RoleBase struct {
	Key  uint64
	name string

	dirtyDataInRoleBase               map[string]interface{}
	dirtyDataForStructFiledInRoleBase map[string]interface{}
	isLoadInRoleBase                  bool
	dbKeyInRoleBase                   string
	ddbNameInRoleBase                 string
	expireInRoleBase                  uint
}

// NewRoleBase : NewRoleBase 的构造函数
func NewRoleBase(dbName string, key uint64) *RoleBase {
	return &RoleBase{
		Key:                               key,
		ddbNameInRoleBase:                 dbName,
		dbKeyInRoleBase:                   "RoleBase:" + fmt.Sprintf("%d", key),
		dirtyDataInRoleBase:               make(map[string]interface{}),
		dirtyDataForStructFiledInRoleBase: make(map[string]interface{}),
	}
}

// HasKey : 是否存在 KEY
//          返回值，若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (objRoleBase *RoleBase) HasKey() (int, error) {
	db := go_redis_orm.GetDB(objRoleBase.ddbNameInRoleBase)
	val, err := redis.Int(db.Do("EXISTS", objRoleBase.dbKeyInRoleBase))
	if err != nil {
		return -1, err
	}
	return val, nil
}

// Load : 从 redis 加载数据
func (objRoleBase *RoleBase) Load() error {
	if objRoleBase.isLoadInRoleBase == true {
		return errors.New("alreay load")
	}
	db := go_redis_orm.GetDB(objRoleBase.ddbNameInRoleBase)
	val, err := redis.Values(db.Do("HGETALL", objRoleBase.dbKeyInRoleBase))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Name string `redis:"name"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	objRoleBase.name = data.Name
	objRoleBase.isLoadInRoleBase = true
	return nil
}

// Save : 保存数据到 redis
func (objRoleBase *RoleBase) Save() error {
	if len(objRoleBase.dirtyDataInRoleBase) == 0 && len(objRoleBase.dirtyDataForStructFiledInRoleBase) == 0 {
		return nil
	}
	for k := range objRoleBase.dirtyDataForStructFiledInRoleBase {
		_ = k

	}
	db := go_redis_orm.GetDB(objRoleBase.ddbNameInRoleBase)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRoleBase.dbKeyInRoleBase).AddFlat(objRoleBase.dirtyDataInRoleBase)...); err != nil {
		return err
	}
	if objRoleBase.expireInRoleBase != 0 {
		if _, err := db.Do("EXPIRE", objRoleBase.dbKeyInRoleBase, objRoleBase.expireInRoleBase); err != nil {
			return err
		}
	}
	objRoleBase.dirtyDataInRoleBase = make(map[string]interface{})
	objRoleBase.dirtyDataForStructFiledInRoleBase = make(map[string]interface{})
	return nil
}

// Delete : 从 redis 删除数据
func (objRoleBase *RoleBase) Delete() error {
	db := go_redis_orm.GetDB(objRoleBase.ddbNameInRoleBase)
	_, err := db.Do("DEL", objRoleBase.dbKeyInRoleBase)
	if err == nil {
		objRoleBase.isLoadInRoleBase = false
		objRoleBase.dirtyDataInRoleBase = make(map[string]interface{})
		objRoleBase.dirtyDataForStructFiledInRoleBase = make(map[string]interface{})
	}
	return err
}

// IsLoad : 是否已经从 redis 导入数据
func (objRoleBase *RoleBase) IsLoad() bool {
	return objRoleBase.isLoadInRoleBase
}

// Expire : 向 redis 设置该对象过期时间
func (objRoleBase *RoleBase) Expire(v uint) {
	objRoleBase.expireInRoleBase = v
}

// DirtyData : 获取该对象目前已脏的数据
func (objRoleBase *RoleBase) DirtyData() (map[string]interface{}, error) {
	for k := range objRoleBase.dirtyDataForStructFiledInRoleBase {
		_ = k

	}
	data := make(map[string]interface{})
	for k, v := range objRoleBase.dirtyDataInRoleBase {
		data[k] = v
	}
	objRoleBase.dirtyDataInRoleBase = make(map[string]interface{})
	objRoleBase.dirtyDataForStructFiledInRoleBase = make(map[string]interface{})
	return data, nil
}

// Save2 : 保存数据到 redis 的第 2 种方法
func (objRoleBase *RoleBase) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(objRoleBase.ddbNameInRoleBase)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRoleBase.dbKeyInRoleBase).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if objRoleBase.expireInRoleBase != 0 {
		if _, err := db.Do("EXPIRE", objRoleBase.dbKeyInRoleBase, objRoleBase.expireInRoleBase); err != nil {
			return err
		}
	}
	return nil
}

// GetName : 获取字段值
func (objRoleBase *RoleBase) GetName() string {
	return objRoleBase.name
}

// SetName : 设置字段值
func (objRoleBase *RoleBase) SetName(value string) {
	objRoleBase.name = value
	objRoleBase.dirtyDataInRoleBase["name"] = string([]byte(value))
}
