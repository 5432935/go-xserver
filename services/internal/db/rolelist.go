/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package db

import (
	"errors"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gogo/protobuf/proto"
	"github.com/gomodule/redigo/redis"
)

// RoleList : 代表 1 个 redis 对象
type RoleList struct {
	Key   string
	roles DB_ROLELIST

	dirtyDataInRoleList               map[string]interface{}
	dirtyDataForStructFiledInRoleList map[string]interface{}
	isLoadInRoleList                  bool
	dbKeyInRoleList                   string
	ddbNameInRoleList                 string
	expireInRoleList                  uint
}

// NewRoleList : NewRoleList 的构造函数
func NewRoleList(dbName string, key string) *RoleList {
	return &RoleList{
		Key:                               key,
		ddbNameInRoleList:                 dbName,
		dbKeyInRoleList:                   "RoleList:" + key,
		dirtyDataInRoleList:               make(map[string]interface{}),
		dirtyDataForStructFiledInRoleList: make(map[string]interface{}),
	}
}

// HasKey : 是否存在 KEY
//          返回值，若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (objRoleList *RoleList) HasKey() (int, error) {
	db := go_redis_orm.GetDB(objRoleList.ddbNameInRoleList)
	val, err := redis.Int(db.Do("EXISTS", objRoleList.dbKeyInRoleList))
	if err != nil {
		return -1, err
	}
	return val, nil
}

// Load : 从 redis 加载数据
func (objRoleList *RoleList) Load() error {
	if objRoleList.isLoadInRoleList == true {
		return errors.New("alreay load")
	}
	db := go_redis_orm.GetDB(objRoleList.ddbNameInRoleList)
	val, err := redis.Values(db.Do("HGETALL", objRoleList.dbKeyInRoleList))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Roles []byte `redis:"roles"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	if err := proto.Unmarshal(data.Roles, &objRoleList.roles); err != nil {
		return err
	}

	objRoleList.isLoadInRoleList = true
	return nil
}

// Save : 保存数据到 redis
func (objRoleList *RoleList) Save() error {
	if len(objRoleList.dirtyDataInRoleList) == 0 && len(objRoleList.dirtyDataForStructFiledInRoleList) == 0 {
		return nil
	}
	for k := range objRoleList.dirtyDataForStructFiledInRoleList {
		_ = k
		if k == "roles" {
			data, err := proto.Marshal(&objRoleList.roles)
			if err != nil {
				return err
			}
			objRoleList.dirtyDataInRoleList["roles"] = data
		}
	}
	db := go_redis_orm.GetDB(objRoleList.ddbNameInRoleList)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRoleList.dbKeyInRoleList).AddFlat(objRoleList.dirtyDataInRoleList)...); err != nil {
		return err
	}
	if objRoleList.expireInRoleList != 0 {
		if _, err := db.Do("EXPIRE", objRoleList.dbKeyInRoleList, objRoleList.expireInRoleList); err != nil {
			return err
		}
	}
	objRoleList.dirtyDataInRoleList = make(map[string]interface{})
	objRoleList.dirtyDataForStructFiledInRoleList = make(map[string]interface{})
	return nil
}

// Delete : 从 redis 删除数据
func (objRoleList *RoleList) Delete() error {
	db := go_redis_orm.GetDB(objRoleList.ddbNameInRoleList)
	_, err := db.Do("DEL", objRoleList.dbKeyInRoleList)
	if err == nil {
		objRoleList.isLoadInRoleList = false
		objRoleList.dirtyDataInRoleList = make(map[string]interface{})
		objRoleList.dirtyDataForStructFiledInRoleList = make(map[string]interface{})
	}
	return err
}

// IsLoad : 是否已经从 redis 导入数据
func (objRoleList *RoleList) IsLoad() bool {
	return objRoleList.isLoadInRoleList
}

// Expire : 向 redis 设置该对象过期时间
func (objRoleList *RoleList) Expire(v uint) {
	objRoleList.expireInRoleList = v
}

// DirtyData : 获取该对象目前已脏的数据
func (objRoleList *RoleList) DirtyData() (map[string]interface{}, error) {
	for k := range objRoleList.dirtyDataForStructFiledInRoleList {
		_ = k
		if k == "roles" {
			data, err := proto.Marshal(&objRoleList.roles)
			if err != nil {
				return nil, err
			}
			objRoleList.dirtyDataInRoleList["roles"] = data
		}
	}
	data := make(map[string]interface{})
	for k, v := range objRoleList.dirtyDataInRoleList {
		data[k] = v
	}
	objRoleList.dirtyDataInRoleList = make(map[string]interface{})
	objRoleList.dirtyDataForStructFiledInRoleList = make(map[string]interface{})
	return data, nil
}

// Save2 : 保存数据到 redis 的第 2 种方法
func (objRoleList *RoleList) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(objRoleList.ddbNameInRoleList)
	if _, err := db.Do("HMSET", redis.Args{}.Add(objRoleList.dbKeyInRoleList).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if objRoleList.expireInRoleList != 0 {
		if _, err := db.Do("EXPIRE", objRoleList.dbKeyInRoleList, objRoleList.expireInRoleList); err != nil {
			return err
		}
	}
	return nil
}

// GetRoles : 获取字段值
func (objRoleList *RoleList) GetRoles(mutable bool) *DB_ROLELIST {
	if mutable {
		objRoleList.dirtyDataForStructFiledInRoleList["roles"] = nil
	}
	return &objRoleList.roles
}
